<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>html5 涂鸦跳跃</title>
	<script src="../js/phaser2.6.1.min.js"></script>
</head>
<body>
<script>
var game = new Phaser.Game(310,480,Phaser.AUTO,'');
var constant={
    'player':null,
    'broken.downS':50,//the broken y speed
    'block.height':15,
    'block.width':57,
    'upS' : -(game.height-50),//the player up speed
    'spring.ups':-(game.height-50 + 200),//the speed when player touched spring
    'trampoline.ups':-(game.height-50 + 400),//the speed when player touched trampoline

}
var boot = function(){
    this.preload = function(){
        console.log('boot.preload');
        if(!game.device.desktop){
            this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
            this.scale.refresh();
        }
        game.load.image('loading','assets/img/preloader.gif');
    },
    this.create = function(){
        console.log('boot.create');
        game.state.start('menu');
    }
}
var menu = function(){
    this.preload = function(){
		var preloadSprite = game.add.sprite(50,game.height/2,'loading');
        game.load.setPreloadSprite(preloadSprite);
		this.load.image('bg','assets/img/bck.png');
		this.load.image('menu','assets/img/main_menu2.png');   
        this.load.image('begin','assets/img/begin.png');   
		this.load.image('again','assets/img/again.png');
		this.load.image('options','assets/img/options.png');
		this.load.spritesheet('player','assets/img/player.png', 64, 64, 30);   
		this.load.image('block0','assets/img/block0.jpg');   
		this.load.spritesheet('broken','assets/img/broken.png', 60, 29, 4);   
		this.load.image('spring0','assets/img/spring0.png');   
		this.load.image('spring1','assets/img/spring1.png');   
		this.load.image('trampoline0','assets/img/trampoline0.png');   
		this.load.image('trampoline1','assets/img/trampoline1.png');   
		this.load.image('rocket','assets/img/rocket.png');   
		
	},
    this.create = function(){
		this.physics.startSystem(Phaser.Physics.ARCADE);
		this.add.sprite(0,0,'menu');
		this.begin = this.add.button(25, 120, 'begin',function(){
			game.state.start('Game');
			//game.state.start('score');
		});
		this.block0 = this.add.sprite(40, game.height - 50, 'block0');
		this.block0.anchor.setTo(0.5, 0.5);
		this.block0.enableBody = true;
		this.physics.enable(this.block0);
		this.block0.body.immovable = true;
		this.player =  this.add.sprite(45, game.height - 150, 'player');
		this.player.anchor.setTo(0.5, 0.5);
		this.physics.enable(this.player);
		this.player.body.collideWorldBounds = true;
		this.player.body.gravity.y = 400;
		this.player.body.bounce.y = 1;

    }
	this.update = function(){
		this.physics.arcade.collide(this.player, this.block0);
		if(this.player.body.touching.down){
			this.player.frame = 1;
		}else{
			this.player.frame = 0;
		}
	}
}
var JumpGame = function(){
	this.bg = null;
	this.player = null;
	this.facing = 'left';
	this.score = 100;
    this.locked = false;
    this.cursors;
    this.totalHeight = 0;
};
JumpGame.prototype = {
	init:function(){
        console.log('init');
	},
	preload:function(){
		console.log('preload');	

	},
	create:function(){
		this.physics.startSystem(Phaser.Physics.ARCADE);
        this.physics.arcade.gravity.y = 600;
		this.bg = this.add.tileSprite(0,0,game.width, game.height,'bg');
        var style = {font : '30px Arial', fill : '#ffffff' };
        this.scoreText = this.game.add.text(10, 10, '0', style);

        this.player = this.add.sprite(game.width/2, 200,'player');
        this.player.anchor.setTo(0.5, 0);
        constant.player = this.player;
        this.player.animations.add('youFan', [4,5,6,7,8,9,10,11,12], 12, false, true);
        this.player.animations.add('youRocket', [13,14,15,16,17,18,19,20,21,22,23], 12, false, true);
        this.player.animations.add('youHele', [24,25,26,27], 12, false, true);
        this.player.animations.add('youYun', [28,29,30], 12, false, true);
		this.blocks = this.add.group();//障碍的集合
		this.blocks.enableBody = true;

        this.brokenBlocks = this.add.group();//断裂的踏板集合

        this.springs = this.add.group();//弹簧的集合

        this.trampolines = this.add.group();//蹦床的集合

        this.rockets = this.add.group();//火箭的集合

		this.initGame();
        
		this.physics.enable(this.player);
		this.player.body.collideWorldBounds = true;
        this.cursors = this.input.keyboard.createCursorKeys();
	},
    update:function(){
        var height = game.height/2 - this.player.body.top;
        if(height>0){
            this.score += height/100;
            this.scoreText.text = Math.floor(this.score);
            this.totalHeight += height;
            if(this.totalHeight>50){
                this.totalHeight = this.totalHeight % 50;
                this.createBlock();
            }
            this.player.body.y = game.height/2;
            this.blocks.forEachExists(function(block){
                block.y += height;
            }, this);
            this.brokenBlocks.forEachExists(function(broken){
                broken.y += height;
            }, this);
            this.springs.forEachExists(function(spring){
                spring.y += height;
                if(spring.y > game.height){
                    spring.kill();
                }
            }, this);
            this.trampolines.forEachExists(function(spring){
                spring.y += height;
                if(spring.y > game.height){
                    spring.kill();
                }
            }, this);
            this.rockets.forEachExists(function(spring){
                spring.y += height;
                if(spring.y > game.height){
                    spring.kill();
                }
            }, this);
        }
		if(this.player.body.touching.down){
            console.log('down');
			this.player.frame = 1;
		}else{
//			this.player.frame = 0;
		}       
        //这是碰到游戏区域的底部之后反弹
        if(this.player.body.blocked.down){
            console.log('blocked.down');
            game.state.start('score');
            this.player.body.velocity.y = constant['upS'];
        }
		this.physics.arcade.collide(this.player, this.blocks, this.collideNormal, null, this);
		this.physics.arcade.collide(this.player, this.brokenBlocks, this.collideBroken, null, this);
		this.physics.arcade.collide(this.player, this.springs, this.collideSpring, null, this);
		this.physics.arcade.collide(this.player, this.trampolines, this.collideTrampoline, null, this);
        this.player.body.velocity.x = 0;
        if(this.cursors.left.isDown){
            this.player.body.velocity.x = -150;
        }else if(this.cursors.right.isDown){
            this.player.body.velocity.x = 150;
        }

    },
    collideNormal: function (player, block) {
        if ( player.body.velocity.y >= 0 && (player.body.bottom - block.body.top)<8 ){
            player.body.velocity.y = constant['upS'];
        }else if(player.body.velocity.y>=0){
//            console.log("异常" + (player.body.bottom - block.body.top) + '--' + player.body.velocity.y);
        }
    },
    collideBroken:function(player, block){
        if ( player.body.velocity.y >= 0 && (player.body.bottom - block.body.top)<8 ){
            block.play('play');
            block.body.velocity.y = player.body.velocity.y + 5;
        }else if(player.body.velocity.y>=0){
  //          console.log("异常" + (player.body.bottom - block.body.top) + '--' + player.body.velocity.y);
        }         
    },
    collideSpring: function (player, block) {
        if ( player.body.velocity.y >= 0 && (player.body.bottom - block.body.top)<8 ){
            player.body.velocity.y = constant['spring.ups'];
            block.loadTexture('spring1', 0, true);
        }else if(player.body.velocity.y>=0){
 //           console.log("异常" + (player.body.bottom - block.body.top) + '--' + player.body.velocity.y);
        }
    },
    collideTrampoline: function (player, block) {
        if ( player.body.velocity.y >= 0 && (player.body.bottom - block.body.top)<8 ){
            player.body.velocity.y = constant['trampoline.ups'];
            block.loadTexture('trampoline1', 0, true);
            player.play('youFan'e);
        }else if(player.body.velocity.y>=0){
//            console.log("异常" + (player.body.bottom - block.body.top) + '--' + player.body.velocity.y);
        }
    },                 
	initGame:function(){
		var c = game.height / 50;
        this.createBlock(game.width/2-57/2, (game.height - 90) );
        for(var i=1; i<c-1; i++){
			this.createBlock(Math.random()*(game.width-57), i*50);
		}
	},
	createBlock:function(x, y){
		x = x || Math.random() * (game.width - constant['block.width']) + constant['block.width']/2;
		y = y || 0;
        if(this.score < 100){//normal
            this.createBlockByType(x, y, 'normal');
            this.createBlockByType(x, y-constant['block.height'], 'spring');
        }else if(this.score < 200){//normal + broken
            this.createBlockByType(x, y, 'normal');
            if(this.createBlockByType(x, y-constant['block.height'], 'spring')){//create spring
            
            }else{//not create spring
                x = Math.random() * (game.width - 57);
                this.createBlockByType(x, y, 'broken');
            }
        }else{
            this.createBlockByType(x, y, 'normal');
            x = Math.random() * (game.width - 57);
            this.createBlockByType(x, y, 'broken');
        }
        this.scoreText.bringToTop();
        this.player.bringToTop();
	},
    createBlockByType:function(x, y, type){
        if(type == 'normal'){
            var block0 = this.blocks.getFirstDead(true, x , y, 'block0');
            block0.anchor.set(0.5, 1);
            game.physics.arcade.enable(block0);
            block0.body.immovable = true;
            block0.body.customSeparateX = true;//设置了此项，那么两个物体碰撞后不会反弹
            block0.body.customSeparateY = true;
            block0.body.allowGravity = false;
            this.blocks.setAll('checkWorldBounds', true);//边界检测
            this.blocks.setAll('outOfBoundsKill', true);//超出边界自动kill
        
        }else if(type=='broken'){
            if(Math.random()<0.6){
                return;
            }
            var offset = Math.random() * 15 + 15;//这样范围就是15到30
            if(Math.random() < 0.5){//在上面，
                offset *= -1;
            }else{//在下面，值不需要变
                
            }
            var broken = this.brokenBlocks.getFirstDead(true, x , y + offset, 'broken', 0);
            broken.anchor.set(0.5, 1);
            broken.animations.add('play', null, 12, false, true);
            game.physics.arcade.enable(broken);
            broken.body.immovable = true;
            broken.body.customSeparateX = true;//设置了此项，那么两个物体碰撞后不会反弹
            broken.body.customSeparateY = true;
            broken.body.allowGravity = false;
            this.brokenBlocks.setAll('checkWorldBounds', true);//边界检测
            this.brokenBlocks.setAll('outOfBoundsKill', true);//超出边界自动kill
        }else if(type=='spring'){
            if(Math.random()<0.9){
                return false;
            }
            var r = Math.random();
            if(r<0){//spring
                var spring = this.springs.getFirstDead(true, x, y, 'spring0');
                spring.anchor.set(0.5, 1);
                game.physics.arcade.enable(spring);
                spring.body.immovable = true;
                spring.body.customSeparateX = true;//设置了此项，那么两个物体碰撞后不会反弹
                spring.body.customSeparateY = true;
                spring.body.allowGravity = false;
            }else if(r<0){//trampoline
                var spring = this.trampolines.getFirstDead(true, x, y, 'trampoline0');
                spring.anchor.set(0.5, 1);
                game.physics.arcade.enable(spring);
                spring.body.immovable = true;
                spring.body.customSeparateX = true;//设置了此项，那么两个物体碰撞后不会反弹
                spring.body.customSeparateY = true;
                spring.body.allowGravity = false;                      
            }else{//rocket
                var spring = this.rockets.getFirstDead(true, x, y, 'rocket');
                spring.anchor.set(0.5, 1);
                game.physics.arcade.enable(spring);
                spring.body.immovable = true;
                spring.body.customSeparateX = true;//设置了此项，那么两个物体碰撞后不会反弹
                spring.body.customSeparateY = true;
                spring.body.allowGravity = false;           
            }
            return true;
        }
    }

};
var score = function(){
    this.bg;
}
score.prototype={
    preload:function(){
        console.log('');
    },
    create:function(){
		this.physics.startSystem(Phaser.Physics.ARCADE);
        this.physics.arcade.gravity.y = 600;
		this.bg = this.add.tileSprite(0,0,game.width, game.height,'bg');
        var x = constant.player==null?0:constant.player.x;
		this.player = this.add.sprite(x, -45,'player');
        this.player.anchor.setTo(0.5, 0);
		this.physics.enable(this.player);
        this.btns = this.add.group();
        var again = this.add.button(game.width/2, 0, 'again', function(){
			game.state.start('Game');
            console.log("again");        
        }, this, null, null, null,null, this.btns);
        var options = this.add.button(game.width/2, 80, 'options', function(){
            console.log("options");        
        }, this, null, null, null,null, this.btns);
        this.btns.centerY = game.height/2;
        this.btns.centerX = game.width/2;
        this.player.bringToTop();
    }
};
game.state.add('Game', JumpGame, true);
game.state.add('boot', boot, true);
game.state.add('menu', menu, false);
game.state.add('score', score, false);
</script>
</body>
</html>
